<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BPM Detector</title>
    <script>
        let audioContext, analyser, microphone;
        let bufferLength, dataArray;
        let lastPeakTime = 0; 
        let beatTimes = [];
        
        let isListening = false;
        async function startListening() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                microphone = audioContext.createMediaStreamSource(stream);
                microphone.connect(analyser);
                analyser.fftSize = 512; // Higher resolution for better beat detection
                analyser.smoothingTimeConstant = 0.3; // Helps smooth out noise
                bufferLength = analyser.frequencyBinCount;
                dataArray = new Uint8Array(bufferLength);
                isListening = true;
                detectBeats();
            } catch (error) {
                console.error("Error accessing microphone:", error);
            }
        }
        
        function detectBeats() {
            if (!isListening) return;
            analyser.getByteTimeDomainData(dataArray); // Use time-domain data for amplitude-based beat detection
            let sum = 0;
            for (let i = 1; i < bufferLength; i++) {
                sum += Math.abs(dataArray[i] - 128); // Centered around 128 for time-domain data
            }
            let avg = sum / bufferLength;
            
            let currentTime = audioContext.currentTime;
            const threshold = 20; // Adjusted for time-domain amplitude detection
            const minInterval = 0.3;
            if (avg > threshold && currentTime - lastPeakTime > minInterval) {
                beatTimes.push(currentTime);
                lastPeakTime = currentTime;
                
                const maxBeatHistory = 5;
                if (beatTimes.length > maxBeatHistory) {
                    let intervals = beatTimes.slice(1).map((t, i) => t - beatTimes[i]);
                    let avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
                    let bpm = Math.round(60 / avgInterval);
                    document.getElementById("bpm-display").textContent = `BPM: ${bpm}`;
                    beatTimes.shift();
                }
            }
            if (isListening) {
                requestAnimationFrame(detectBeats);
            }
        }
    </script>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f4f4f4;
            margin: 0;
        }
        button {
            padding: 10px 20px;
            font-size: 18px;
            border: none;
            background: blue;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        #bpm-display {
            font-size: 24px;
            font-weight: bold;
            color: green;
        }
    </style>
</head>
<body>
    <button onclick="startListening()">Start BPM Detection</button>
    <div id="bpm-display">BPM: --</div>
</body>
</html>
